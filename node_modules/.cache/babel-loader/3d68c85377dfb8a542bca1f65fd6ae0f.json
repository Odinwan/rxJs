{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/block/PhpstormProjects/react-socket-node-expreess/src/components/Card/CardWrapper.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Subject } from \"rxjs\";\nimport Card from \"./Card\";\n\nconst CardWrapper = props => {\n  _s();\n\n  const subject = new Subject();\n  const movieService = {\n    sendMessage: movies => subject.next(movies),\n    clearMessages: () => subject.next(),\n    onMovie: () => subject.asObservable()\n  };\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    const subscription = movieService.onMovie().subscribe(movies => setMovies(movies));\n    return subscription.unsubscribe;\n  }, []);\n  useEffect(() => {\n    props.items && setMovies(props.items);\n  }, [JSON.stringify(props.items)]);\n\n  function sendMessage(movie) {\n    const temp = [];\n    movies.map(item => {\n      if (item.id === movie.id) {\n        temp.push(movie);\n      } else {\n        temp.push(item);\n      }\n    });\n    movieService.sendMessage(temp);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: movies.map(item => /*#__PURE__*/_jsxDEV(Card, {\n      item: item,\n      setMovie: sendMessage\n    }, `${item.id}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 38\n    }, this))\n  }, void 0, false);\n};\n\n_s(CardWrapper, \"jPo7B09k0HHweWRYbpaxIdscit8=\");\n\n_c = CardWrapper;\nexport default CardWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardWrapper\");","map":{"version":3,"sources":["/Users/block/PhpstormProjects/react-socket-node-expreess/src/components/Card/CardWrapper.tsx"],"names":["React","useEffect","useState","Subject","Card","CardWrapper","props","subject","movieService","sendMessage","movies","next","clearMessages","onMovie","asObservable","setMovies","subscription","subscribe","unsubscribe","items","JSON","stringify","movie","temp","map","item","id","push"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,OAAR,QAAsB,MAAtB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;;AAUA,MAAMC,WAAW,GAAIC,KAAD,IAA6B;AAAA;;AAC7C,QAAMC,OAAO,GAAG,IAAIJ,OAAJ,EAAhB;AAEA,QAAMK,YAAY,GAAG;AACjBC,IAAAA,WAAW,EAAGC,MAAD,IAAqBH,OAAO,CAACI,IAAR,CAAaD,MAAb,CADjB;AAEjBE,IAAAA,aAAa,EAAE,MAAML,OAAO,CAACI,IAAR,EAFJ;AAGjBE,IAAAA,OAAO,EAAE,MAAMN,OAAO,CAACO,YAAR;AAHE,GAArB;AAMA,QAAM,CAACJ,MAAD,EAASK,SAAT,IAAsBb,QAAQ,CAAU,EAAV,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMe,YAAY,GAAGR,YAAY,CAACK,OAAb,GAAuBI,SAAvB,CAChBP,MAAD,IAAqBK,SAAS,CAACL,MAAD,CADb,CAArB;AAIA,WAAOM,YAAY,CAACE,WAApB;AACH,GANQ,EAMN,EANM,CAAT;AAQAjB,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,KAAK,CAACa,KAAN,IAAeJ,SAAS,CAACT,KAAK,CAACa,KAAP,CAAxB;AACH,GAFQ,EAEN,CAACC,IAAI,CAACC,SAAL,CAAef,KAAK,CAACa,KAArB,CAAD,CAFM,CAAT;;AAIA,WAASV,WAAT,CAAqBa,KAArB,EAAmC;AAC/B,UAAMC,IAAa,GAAG,EAAtB;AACAb,IAAAA,MAAM,CAACc,GAAP,CAAYC,IAAD,IAAU;AACjB,UAAIA,IAAI,CAACC,EAAL,KAAYJ,KAAK,CAACI,EAAtB,EAA0B;AACtBH,QAAAA,IAAI,CAACI,IAAL,CAAUL,KAAV;AACH,OAFD,MAEO;AACHC,QAAAA,IAAI,CAACI,IAAL,CAAUF,IAAV;AACH;AACJ,KAND;AAOAjB,IAAAA,YAAY,CAACC,WAAb,CAAyBc,IAAzB;AACH;;AAED,sBAAO;AAAA,cACFb,MAAM,CAACc,GAAP,CAAYC,IAAD,iBAAiB,QAAC,IAAD;AAAyB,MAAA,IAAI,EAAEA,IAA/B;AAAqC,MAAA,QAAQ,EAAEhB;AAA/C,OAAY,GAAEgB,IAAI,CAACC,EAAG,EAAtB;AAAA;AAAA;AAAA;AAAA,YAA5B;AADE,mBAAP;AAGH,CAtCD;;GAAMrB,W;;KAAAA,W;AAwCN,eAAeA,WAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Subject} from \"rxjs\";\nimport {Movie} from \"../../interfaces\";\nimport Card from \"./Card\";\n\ninterface CardWrapperProps {\n    items: Movie[]\n}\n\n\n\n\n\nconst CardWrapper = (props: CardWrapperProps) => {\n    const subject = new Subject<Movie[]>();\n\n    const movieService = {\n        sendMessage: (movies: Movie[]) => subject.next(movies),\n        clearMessages: () => subject.next(),\n        onMovie: () => subject.asObservable(),\n    };\n\n    const [movies, setMovies] = useState<Movie[]>([]);\n\n    useEffect(() => {\n        const subscription = movieService.onMovie().subscribe(\n            (movies: Movie[]) => setMovies(movies),\n        );\n\n        return subscription.unsubscribe;\n    }, []);\n\n    useEffect(() => {\n        props.items && setMovies(props.items);\n    }, [JSON.stringify(props.items)]);\n\n    function sendMessage(movie: Movie) {\n        const temp: Movie[] = [];\n        movies.map((item) => {\n            if (item.id === movie.id) {\n                temp.push(movie);\n            } else {\n                temp.push(item);\n            }\n        });\n        movieService.sendMessage(temp);\n    }\n\n    return <>\n        {movies.map((item: Movie) => <Card key={`${item.id}`} item={item} setMovie={sendMessage}/>)}\n    </>;\n};\n\nexport default CardWrapper;\n\n"]},"metadata":{},"sourceType":"module"}