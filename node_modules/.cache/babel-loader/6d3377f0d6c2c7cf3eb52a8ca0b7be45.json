{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/block/PhpstormProjects/react-socket-node-expreess/src/components/Card/CardWrapper.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Subject } from \"rxjs\";\nimport Card from \"./Card\";\nconst subject = new Subject();\nexport const movieService = {\n  sendMessage: movie => subject.next(movie),\n  clearMessages: () => subject.next(),\n  onMovie: () => subject.asObservable()\n};\n\nconst CardWrapper = props => {\n  _s();\n\n  console.log('12412', props.items);\n  const [movies, setMovies] = useState(props.items);\n  useEffect(() => {\n    setMovies(props.items); // const subscription = movieService.onMovie().subscribe((movie: any) => {\n    //     if (movie) {\n    //         console.log(movie)\n    //         // const newMovies = movies.filter(item => item.id !== movie.id).push(movie);\n    //         // setMovies(newMovies);\n    //     }\n    //     else {\n    //         setMovies(props.items);\n    //     }\n    // });\n    // return subscription.unsubscribe;\n  }, []);\n\n  function sendMessage(movie) {\n    movieService.sendMessage(movie);\n  }\n\n  function clearMessages() {\n    movieService.clearMessages();\n  }\n\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: movies.map(item => /*#__PURE__*/_jsxDEV(Card, {\n      item: item,\n      setMovie: sendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 38\n    }, this))\n  }, void 0, false);\n};\n\n_s(CardWrapper, \"hzRbkArHRaXgUPnH1zmuCV2OWt8=\");\n\n_c = CardWrapper;\nexport default CardWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardWrapper\");","map":{"version":3,"sources":["/Users/block/PhpstormProjects/react-socket-node-expreess/src/components/Card/CardWrapper.tsx"],"names":["React","useEffect","useState","Subject","Card","subject","movieService","sendMessage","movie","next","clearMessages","onMovie","asObservable","CardWrapper","props","console","log","items","movies","setMovies","map","item"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,OAAR,QAAsB,MAAtB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AAMA,MAAMC,OAAO,GAAG,IAAIF,OAAJ,EAAhB;AAEA,OAAO,MAAMG,YAAY,GAAG;AACxBC,EAAAA,WAAW,EAAGC,KAAD,IAAkBH,OAAO,CAACI,IAAR,CAAaD,KAAb,CADP;AAExBE,EAAAA,aAAa,EAAE,MAAML,OAAO,CAACI,IAAR,EAFG;AAGxBE,EAAAA,OAAO,EAAE,MAAMN,OAAO,CAACO,YAAR;AAHS,CAArB;;AAMP,MAAMC,WAAW,GAAIC,KAAD,IAA6B;AAAA;;AAC7CC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBF,KAAK,CAACG,KAA1B;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAUY,KAAK,CAACG,KAAhB,CAApC;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACZkB,IAAAA,SAAS,CAACL,KAAK,CAACG,KAAP,CAAT,CADY,CAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACH,GAdQ,EAcN,EAdM,CAAT;;AAgBA,WAASV,WAAT,CAAqBC,KAArB,EAAmC;AAC/BF,IAAAA,YAAY,CAACC,WAAb,CAAyBC,KAAzB;AACH;;AAED,WAASE,aAAT,GAAyB;AACrBJ,IAAAA,YAAY,CAACI,aAAb;AACH;;AACDK,EAAAA,OAAO,CAACC,GAAR,CAAYE,MAAZ;AACA,sBAAO;AAAA,cACFA,MAAM,CAACE,GAAP,CAAYC,IAAD,iBAAiB,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEA,IAAZ;AAAkB,MAAA,QAAQ,EAAEd;AAA5B;AAAA;AAAA;AAAA;AAAA,YAA5B;AADE,mBAAP;AAGH,CA/BD;;GAAMM,W;;KAAAA,W;AAiCN,eAAeA,WAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Subject} from \"rxjs\";\nimport {Movie} from \"../../interfaces\";\nimport Card from \"./Card\";\n\ninterface CardWrapperProps {\n    items: Movie[]\n}\n\nconst subject = new Subject();\n\nexport const movieService = {\n    sendMessage: (movie: Movie) => subject.next(movie),\n    clearMessages: () => subject.next(),\n    onMovie: () => subject.asObservable(),\n};\n\nconst CardWrapper = (props: CardWrapperProps) => {\n    console.log('12412',props.items)\n    const [movies, setMovies] = useState<Movie[]>(props.items);\n\n    useEffect(() => {\n        setMovies(props.items);\n        // const subscription = movieService.onMovie().subscribe((movie: any) => {\n        //     if (movie) {\n        //         console.log(movie)\n        //         // const newMovies = movies.filter(item => item.id !== movie.id).push(movie);\n        //         // setMovies(newMovies);\n        //     }\n        //     else {\n        //         setMovies(props.items);\n        //     }\n        // });\n\n        // return subscription.unsubscribe;\n    }, []);\n\n    function sendMessage(movie: Movie) {\n        movieService.sendMessage(movie);\n    }\n\n    function clearMessages() {\n        movieService.clearMessages();\n    }\n    console.log(movies)\n    return <>\n        {movies.map((item: Movie) => <Card item={item} setMovie={sendMessage}/>)}\n    </>;\n};\n\nexport default CardWrapper;\n\n"]},"metadata":{},"sourceType":"module"}