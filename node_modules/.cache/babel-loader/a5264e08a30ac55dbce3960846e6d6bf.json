{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/block/PhpstormProjects/react-socket-node-expreess/src/components/Card/CardWrapper.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Subject } from \"rxjs\";\nimport Card from \"./Card\";\n/**\nИнтерфейс обертки карточки\n */\n\n/**\n Создаем стрим subject$\n */\nconst subject$ = new Subject();\n/**\n Описываем методы изменения этого стрима\n */\n\nexport const movieService = {\n  editMovie: movies => subject$.next(movies),\n  // колбек который добавляет в обработку новое значение стрима при помощи метода next\n  onMovie: () => subject$.asObservable() // для того что бы подписаться в нашем компоненте, необходимо использовать метод asObservable\n\n};\n/**\nОбертка вывода наших карт с фильмами нужна для того что бы на этом уровне произошла\n */\n\nconst CardWrapper = props => {\n  _s();\n\n  /**\n   Создаем стейт для удобства монипулирования данными\n   */\n  const [movies, setMovies] = useState([]);\n  /**\n   В этом жизненом цикле у нас происходит подписка на наш стрим subject$,\n   а в return (когда компонент умирает) происходит отписка.\n   */\n\n  useEffect(() => {\n    const subscription = movieService.onMovie().subscribe(movies => setMovies(movies));\n    return subscription.unsubscribe;\n  }, []);\n  /**\n   Проверка наличия данных, когда данные появились мы сохраняем в наш стейт\n   */\n\n  useEffect(() => {\n    props.items && setMovies(props.items);\n  }, [JSON.stringify(props.items)]);\n  /**\n   Передаем новое значение в наш стрим для обработки данных и изменения стейта обертки\n   */\n\n  function sendMessage(movie) {\n    const temp = [];\n    movies.map(item => {\n      if (item.id === movie.id) {\n        temp.push(movie);\n      } else {\n        temp.push(item);\n      }\n    });\n    movieService.editMovie(temp);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: movies.map(item => /*#__PURE__*/_jsxDEV(Card, {\n      item: item,\n      setMovie: sendMessage\n    }, `${item.id}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 38\n    }, this))\n  }, void 0, false);\n};\n\n_s(CardWrapper, \"jPo7B09k0HHweWRYbpaxIdscit8=\");\n\n_c = CardWrapper;\nexport default CardWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardWrapper\");","map":{"version":3,"sources":["/Users/block/PhpstormProjects/react-socket-node-expreess/src/components/Card/CardWrapper.tsx"],"names":["React","useEffect","useState","Subject","Card","subject$","movieService","editMovie","movies","next","onMovie","asObservable","CardWrapper","props","setMovies","subscription","subscribe","unsubscribe","items","JSON","stringify","sendMessage","movie","temp","map","item","id","push"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,OAAR,QAAsB,MAAtB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AAEA;AACA;AACA;;AAKA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,IAAIF,OAAJ,EAAjB;AAEA;AACA;AACA;;AACA,OAAO,MAAMG,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAGC,MAAD,IAAqBH,QAAQ,CAACI,IAAT,CAAcD,MAAd,CADR;AACgC;AACxDE,EAAAA,OAAO,EAAE,MAAML,QAAQ,CAACM,YAAT,EAFS,CAEgC;;AAFhC,CAArB;AAKP;AACA;AACA;;AACA,MAAMC,WAAW,GAAIC,KAAD,IAA6B;AAAA;;AAE7C;AACJ;AACA;AACI,QAAM,CAACL,MAAD,EAASM,SAAT,IAAsBZ,QAAQ,CAAU,EAAV,CAApC;AAEA;AACJ;AACA;AACA;;AACID,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMc,YAAY,GAAGT,YAAY,CAACI,OAAb,GAAuBM,SAAvB,CAChBR,MAAD,IAAqBM,SAAS,CAACN,MAAD,CADb,CAArB;AAIA,WAAOO,YAAY,CAACE,WAApB;AACH,GANQ,EAMN,EANM,CAAT;AAQA;AACJ;AACA;;AACIhB,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,KAAK,CAACK,KAAN,IAAeJ,SAAS,CAACD,KAAK,CAACK,KAAP,CAAxB;AACH,GAFQ,EAEN,CAACC,IAAI,CAACC,SAAL,CAAeP,KAAK,CAACK,KAArB,CAAD,CAFM,CAAT;AAIA;AACJ;AACA;;AACI,WAASG,WAAT,CAAqBC,KAArB,EAAmC;AAC/B,UAAMC,IAAa,GAAG,EAAtB;AACAf,IAAAA,MAAM,CAACgB,GAAP,CAAYC,IAAD,IAAU;AACjB,UAAIA,IAAI,CAACC,EAAL,KAAYJ,KAAK,CAACI,EAAtB,EAA0B;AACtBH,QAAAA,IAAI,CAACI,IAAL,CAAUL,KAAV;AACH,OAFD,MAEO;AACHC,QAAAA,IAAI,CAACI,IAAL,CAAUF,IAAV;AACH;AACJ,KAND;AAOAnB,IAAAA,YAAY,CAACC,SAAb,CAAuBgB,IAAvB;AACH;;AAED,sBAAO;AAAA,cACFf,MAAM,CAACgB,GAAP,CAAYC,IAAD,iBAAiB,QAAC,IAAD;AAAyB,MAAA,IAAI,EAAEA,IAA/B;AAAqC,MAAA,QAAQ,EAAEJ;AAA/C,OAAY,GAAEI,IAAI,CAACC,EAAG,EAAtB;AAAA;AAAA;AAAA;AAAA,YAA5B;AADE,mBAAP;AAGH,CA5CD;;GAAMd,W;;KAAAA,W;AA8CN,eAAeA,WAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Subject} from \"rxjs\";\nimport {Movie} from \"../../interfaces\";\nimport Card from \"./Card\";\n\n/**\nИнтерфейс обертки карточки\n */\ninterface CardWrapperProps {\n    items: Movie[]\n}\n\n/**\n Создаем стрим subject$\n */\nconst subject$ = new Subject<Movie[]>();\n\n/**\n Описываем методы изменения этого стрима\n */\nexport const movieService = {\n    editMovie: (movies: Movie[]) => subject$.next(movies),  // колбек который добавляет в обработку новое значение стрима при помощи метода next\n    onMovie: () => subject$.asObservable(),                 // для того что бы подписаться в нашем компоненте, необходимо использовать метод asObservable\n};\n\n/**\nОбертка вывода наших карт с фильмами нужна для того что бы на этом уровне произошла\n */\nconst CardWrapper = (props: CardWrapperProps) => {\n\n    /**\n     Создаем стейт для удобства монипулирования данными\n     */\n    const [movies, setMovies] = useState<Movie[]>([]);\n\n    /**\n     В этом жизненом цикле у нас происходит подписка на наш стрим subject$,\n     а в return (когда компонент умирает) происходит отписка.\n     */\n    useEffect(() => {\n        const subscription = movieService.onMovie().subscribe(\n            (movies: Movie[]) => setMovies(movies),\n        );\n\n        return subscription.unsubscribe;\n    }, []);\n\n    /**\n     Проверка наличия данных, когда данные появились мы сохраняем в наш стейт\n     */\n    useEffect(() => {\n        props.items && setMovies(props.items);\n    }, [JSON.stringify(props.items)]);\n\n    /**\n     Передаем новое значение в наш стрим для обработки данных и изменения стейта обертки\n     */\n    function sendMessage(movie: Movie) {\n        const temp: Movie[] = [];\n        movies.map((item) => {\n            if (item.id === movie.id) {\n                temp.push(movie);\n            } else {\n                temp.push(item);\n            }\n        });\n        movieService.editMovie(temp);\n    }\n\n    return <>\n        {movies.map((item: Movie) => <Card key={`${item.id}`} item={item} setMovie={sendMessage}/>)}\n    </>;\n};\n\nexport default CardWrapper;\n\n"]},"metadata":{},"sourceType":"module"}