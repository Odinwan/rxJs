{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/block/PhpstormProjects/react-socket-node-expreess/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport SignIn from \"./components/auth/SignIn\";\nimport Chat from \"./components/chat/Chat\";\nimport reducer from \"./reducer\";\nimport { interval } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport Notification from \"./components/notifications/Not\";\nexport const socket = io(\"http://localhost:9999\");\nconst stream$ = interval(1000).pipe(map(value => 1 + value * value));\n\nconst App = () => {\n  _s();\n\n  const [state, dispatch] = React.useReducer(reducer, {\n    isAuth: false,\n    roomId: null,\n    userName: null,\n    status: [],\n    users: [],\n    messages: []\n  });\n  const [status, setStatus] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    stream$.subscribe(value => console.log(\"val\", value), error => console.log(error), () => console.log(\"Complite\"));\n    socket.on(\"ROOM:SET_USERS\", users => setUsers(users));\n    socket.on(\"ROOM:NEW_MESSAGE\", message => addMessage(message));\n    socket.on(\"ROOM:CHANGE_STATUS\", status => addStatus(status));\n    socket.on(\"ROOM:JOIN_SOME_USER\", name => MessageNewUser(name, \"new\"));\n    socket.on(\"ROOM:DISCONNECT_SOME_USER\", name => MessageNewUser(name, \"exit\"));\n    return () => {\n      stream$.subscribe().unsubscribe();\n    };\n  }, []);\n\n  const setUsers = users => {\n    dispatch({\n      type: \"SET_USERS\",\n      payload: users\n    });\n  };\n\n  const addStatus = status => {\n    dispatch({\n      type: \"SET_STATUS\",\n      payload: status\n    });\n  };\n\n  const addMessage = message => {\n    console.log(\"message\", message);\n    dispatch({\n      type: \"NEW_MESSAGE\",\n      payload: message\n    });\n  };\n\n  const MessageNewUser = (user, status) => {\n    console.log(\"user\", user);\n    setStatus(status);\n    user !== null && setError(status === \"new\" ? `К нам зашел ${user}` : `От нас ушел ${user}`);\n  };\n\n  const onLogin = async user => {\n    dispatch({\n      type: \"IS_AUTH\",\n      payload: user\n    });\n    socket.emit(\"ROOM:JOIN\", user);\n    const res = await axios.get(`/rooms`);\n    dispatch({\n      type: \"SET_DATA\",\n      payload: res.data\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Notification, {\n      value: error,\n      status: status,\n      setStatus: setStatus,\n      setError: setError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), !state.isAuth ? /*#__PURE__*/_jsxDEV(SignIn, {\n      socket: socket,\n      onLogin: onLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Chat, {\n      addStatus: addStatus,\n      addMessage: addMessage,\n      status: state.status,\n      roomId: state.roomId,\n      socket: socket,\n      userName: state.userName,\n      users: state.users,\n      messages: state.messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"QV8K69cSLw8PTcyWO49ifQPC8uc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/block/PhpstormProjects/react-socket-node-expreess/src/App.tsx"],"names":["React","useEffect","useState","SignIn","Chat","reducer","interval","map","io","axios","Notification","socket","stream$","pipe","value","App","state","dispatch","useReducer","isAuth","roomId","userName","status","users","messages","setStatus","error","setError","subscribe","console","log","on","setUsers","message","addMessage","addStatus","name","MessageNewUser","unsubscribe","type","payload","user","onLogin","emit","res","get","data"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport SignIn from \"./components/auth/SignIn\";\nimport Chat from \"./components/chat/Chat\";\nimport reducer from \"./reducer\";\nimport {Message, Status, User} from \"./interfaces\";\nimport {interval} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport Notification from \"./components/notifications/Not\";\n\nexport const socket = io(\"http://localhost:9999\");\n\nconst stream$ = interval(1000).pipe(\n    map(value => 1 + value * value),\n);\n\nconst App = () => {\n\n    const [state, dispatch] = React.useReducer(reducer, {\n        isAuth: false,\n        roomId: null,\n        userName: null,\n        status: [],\n        users: [],\n        messages: [],\n    });\n\n    const [status, setStatus] = useState<string>(\"\");\n    const [error, setError] = useState<string>(\"\");\n\n    useEffect(() => {\n        stream$.subscribe(\n            (value) => console.log(\"val\", value),\n            (error) => console.log(error),\n            () => console.log(\"Complite\"),\n        );\n        socket.on(\"ROOM:SET_USERS\", (users: User[]) => setUsers(users));\n        socket.on(\"ROOM:NEW_MESSAGE\", (message: Message) => addMessage(message));\n        socket.on(\"ROOM:CHANGE_STATUS\", (status: Status) => addStatus(status));\n        socket.on(\"ROOM:JOIN_SOME_USER\", (name: string) => MessageNewUser(name, \"new\"));\n        socket.on(\"ROOM:DISCONNECT_SOME_USER\", (name: string) => MessageNewUser(name, \"exit\"));\n        return () => {\n            stream$.subscribe().unsubscribe();\n        };\n    }, []);\n\n    const setUsers = (users: User[]) => {\n        dispatch({\n            type: \"SET_USERS\",\n            payload: users,\n        });\n    };\n\n    const addStatus = (status: Status) => {\n        dispatch({\n            type: \"SET_STATUS\",\n            payload: status,\n        });\n    };\n\n    const addMessage = (message: Message) => {\n        console.log(\"message\", message);\n        dispatch({\n            type: \"NEW_MESSAGE\",\n            payload: message,\n        });\n    };\n\n    const MessageNewUser = (user: string, status: string) => {\n        console.log(\"user\", user);\n        setStatus(status);\n        user !== null && setError(status === \"new\" ? `К нам зашел ${user}` : `От нас ушел ${user}`);\n    };\n\n    const onLogin = async (user: User) => {\n        dispatch({\n            type: \"IS_AUTH\",\n            payload: user,\n        });\n        socket.emit(\"ROOM:JOIN\", user);\n        const res = await axios.get(`/rooms`);\n        dispatch({\n            type: \"SET_DATA\",\n            payload: res.data,\n        });\n    };\n\n    return <>\n        <Notification value={error} status={status} setStatus={setStatus} setError={setError}/>\n        {!state.isAuth ?\n            <SignIn socket={socket} onLogin={onLogin}/>\n            :\n            <Chat\n                addStatus={addStatus}\n                addMessage={addMessage}\n                status={state.status}\n                roomId={state.roomId}\n                socket={socket}\n                userName={state.userName}\n                users={state.users}\n                messages={state.messages}\n            />}\n    </>;\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}