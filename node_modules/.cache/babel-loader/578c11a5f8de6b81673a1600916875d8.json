{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/block/PhpstormProjects/reactrxServer/src/components/Card/CardWrapper.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\nimport { movieService } from \"./stream\";\n/**\nИнтерфейс обертки карточки\n */\n\n/**\nОбертка вывода наших карт с фильмами нужна для того что бы на этом уровне произошла\n */\nconst CardWrapper = props => {\n  _s();\n\n  /**\n   Создаем стейт для удобства монипулирования данными\n   */\n  const [movies, setMovies] = useState([]);\n  /**\n   В этом жизненом цикле у нас происходит подписка на наш стрим subject$,\n   а в return (когда компонент умирает) происходит отписка.\n   */\n\n  useEffect(() => {\n    const subscription = movieService.onMovie().subscribe(movie => setMovies(movies => movies.map(currentMovie => {\n      if (currentMovie.id !== movie.id) {\n        return currentMovie;\n      }\n\n      return { ...movie\n      };\n    })));\n    return subscription.unsubscribe;\n  }, []);\n  /**\n   Проверка наличия данных, когда данные появились мы сохраняем в наш стейт\n   */\n\n  useEffect(() => {\n    setMovies(props.items);\n  }, [JSON.stringify(props.items)]);\n  /**\n   Мапим карточки\n   */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: movies.map(item => /*#__PURE__*/_jsxDEV(Card, {\n      item: item\n    }, `${item.id}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 38\n    }, this))\n  }, void 0, false);\n};\n\n_s(CardWrapper, \"jPo7B09k0HHweWRYbpaxIdscit8=\");\n\n_c = CardWrapper;\nexport default CardWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardWrapper\");","map":{"version":3,"sources":["/Users/block/PhpstormProjects/reactrxServer/src/components/Card/CardWrapper.tsx"],"names":["React","useEffect","useState","Card","movieService","CardWrapper","props","movies","setMovies","subscription","onMovie","subscribe","movie","map","currentMovie","id","unsubscribe","items","JSON","stringify","item"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AAGA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,YAAR,QAA2B,UAA3B;AAEA;AACA;AACA;;AAOA;AACA;AACA;AACA,MAAMC,WAAW,GAAIC,KAAD,IAA6B;AAAA;;AAE7C;AACJ;AACA;AACI,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAU,EAAV,CAApC;AAEA;AACJ;AACA;AACA;;AACID,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,YAAY,GAAGL,YAAY,CAACM,OAAb,GAAuBC,SAAvB,CAChBC,KAAD,IAAkBJ,SAAS,CAAED,MAAD,IAAYA,MAAM,CAACM,GAAP,CAAWC,YAAY,IAAI;AAC/D,UAAIA,YAAY,CAACC,EAAb,KAAoBH,KAAK,CAACG,EAA9B,EAAkC;AAC9B,eAAOD,YAAP;AACH;;AACD,aAAO,EAAC,GAAGF;AAAJ,OAAP;AACH,KALuC,CAAb,CADV,CAArB;AASA,WAAOH,YAAY,CAACO,WAApB;AACH,GAXQ,EAWN,EAXM,CAAT;AAaA;AACJ;AACA;;AACIf,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,SAAS,CAACF,KAAK,CAACW,KAAP,CAAT;AACH,GAFQ,EAEN,CAACC,IAAI,CAACC,SAAL,CAAeb,KAAK,CAACW,KAArB,CAAD,CAFM,CAAT;AAIA;AACJ;AACA;;AACI,sBAAO;AAAA,cACFV,MAAM,CAACM,GAAP,CAAYO,IAAD,iBAAiB,QAAC,IAAD;AAAyB,MAAA,IAAI,EAAEA;AAA/B,OAAY,GAAEA,IAAI,CAACL,EAAG,EAAtB;AAAA;AAAA;AAAA;AAAA,YAA5B;AADE,mBAAP;AAGH,CArCD;;GAAMV,W;;KAAAA,W;AAuCN,eAAeA,WAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Subject} from \"rxjs\";\nimport {Movie} from \"../../interfaces\";\nimport Card from \"./Card\";\nimport {movieService} from \"./stream\";\n\n/**\nИнтерфейс обертки карточки\n */\ninterface CardWrapperProps {\n    items: Movie[]\n}\n\n\n\n/**\nОбертка вывода наших карт с фильмами нужна для того что бы на этом уровне произошла\n */\nconst CardWrapper = (props: CardWrapperProps) => {\n\n    /**\n     Создаем стейт для удобства монипулирования данными\n     */\n    const [movies, setMovies] = useState<Movie[]>([]);\n\n    /**\n     В этом жизненом цикле у нас происходит подписка на наш стрим subject$,\n     а в return (когда компонент умирает) происходит отписка.\n     */\n    useEffect(() => {\n        const subscription = movieService.onMovie().subscribe(\n            (movie: Movie) => setMovies((movies) => movies.map(currentMovie => {\n                if (currentMovie.id !== movie.id) {\n                    return currentMovie\n                }\n                return {...movie}\n            })),\n        );\n\n        return subscription.unsubscribe;\n    }, []);\n\n    /**\n     Проверка наличия данных, когда данные появились мы сохраняем в наш стейт\n     */\n    useEffect(() => {\n        setMovies(props.items);\n    }, [JSON.stringify(props.items)]);\n\n    /**\n     Мапим карточки\n     */\n    return <>\n        {movies.map((item: Movie) => <Card key={`${item.id}`} item={item} />)}\n    </>;\n};\n\nexport default CardWrapper;\n\n"]},"metadata":{},"sourceType":"module"}